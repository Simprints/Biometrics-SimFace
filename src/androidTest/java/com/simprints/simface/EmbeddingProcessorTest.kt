package com.simprints.simface

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.simprints.biometrics.simface.R
import com.simprints.simface.core.SimFaceConfig
import com.simprints.simface.core.SimFaceFacade
import com.simprints.simface.core.Utils
import org.junit.Assert.assertArrayEquals
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class EmbeddingProcessorTest {
    private lateinit var simFace: SimFaceFacade
    private lateinit var context: Context

    @Before
    fun setup() {
        context = ApplicationProvider.getApplicationContext()
        val simFaceConfig = SimFaceConfig(context)
        SimFaceFacade.initialize(simFaceConfig)
        simFace = SimFaceFacade.getInstance()
    }

    @Test
    fun get_embedding_with_image() {
        val bitmap: Bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.royalty_free_good_face_warp_aligned)

        val result = simFace.embeddingProcessor.getEmbedding(bitmap)
        val resultFloat = Utils.byteArrayToFloatArray(result)

        assertTrue(Utils.byteArrayToFloatArray(result).size == 512)

        // Define the expected output for our image (the output is computed on Android)
        val expectedEmbedding = floatArrayOf(0.22235218F, -0.06573115F, 0.064549915F, -0.02002407F, 0.1888451F, -0.20530538F, -0.04973177F, -0.25494733F, 0.13202119F, -0.148778F, 0.18179284F, -0.04867356F, 0.033369098F, -0.018868245F, 0.12712237F, 0.21370651F, -0.044532172F, 0.2029385F, -0.03819432F, 0.08582875F, -0.07912582F, -0.12514535F, 0.08161272F, -0.19737333F, -0.014659863F, 0.20152691F, -0.023836553F, 0.19201367F, -0.0014592236F, 0.07555491F, -0.14678456F, 0.086291246F, -0.12090092F, -0.09951288F, 0.18824027F, 0.10366111F, 0.0704405F, 0.08372492F, -0.058155093F, -0.21827924F, 0.06688296F, 0.06421904F, 0.002417515F, 0.12176748F, -0.18035609F, -0.04494411F, 0.056096666F, -0.2067921F, 0.18360345F, 0.1493625F, 0.221203F, 0.008848747F, 0.19624898F, 0.06745693F, -0.11268099F, 0.035986494F, 0.15734549F, -0.0662629F, -0.101546705F, -0.11837986F, 0.021069255F, -0.07461218F, -0.14116357F, -0.042330865F, 0.020086981F, 0.049653955F, -0.04945493F, 0.07410819F, 0.0065024495F, -0.083559506F, -0.19707724F, -0.11204993F, 0.029962288F, -0.009462808F, 0.11730549F, 0.13137983F, 0.14329101F, -0.023859618F, 0.10841927F, -0.10426892F, -0.17599522F, 0.012395553F, 0.035168625F, 0.14077708F, -0.08278709F, -0.12984918F, 0.09931489F, -0.011185863F, -0.2068055F, 0.036956854F, -0.2648718F, -0.09834285F, -0.09939463F, -0.036874346F, -0.10254546F, -0.05361104F, -0.22552237F, 0.18521413F, -0.07751991F, 0.029257953F, -0.045545638F, 0.11054952F, -0.014694431F, 0.06482626F, -0.040790834F, -0.1488797F, -0.12762584F, -0.13786273F, 0.1503433F, 0.05626452F, -0.074893385F, -0.03205858F, 0.2147778F, 0.042098712F, -0.110880546F, 0.23490345F, -0.0019808484F, -0.13573481F, -0.054862373F, -0.027058866F, -0.18298514F, -0.098366976F, 0.09888679F, -0.08567941F, -0.24967119F, 0.0952294F, 0.16027626F, -0.078541785F, 0.018798012F, -0.049168266F, 0.016376108F, -0.11412592F, 0.03423267F, 0.03650038F, 0.061381675F, -0.009988178F, -0.016900782F, -0.017092923F, -0.02913823F, -0.078286886F, -0.08291545F, 0.15606822F, 0.1102705F, 0.004403687F, -0.04229623F, -0.035006404F, 0.034843292F, 0.12639877F, -0.18059553F, 0.099791035F, -0.08284542F, 0.12163526F, 0.24943496F, -0.20095997F, -0.11533527F, 0.0819127F, -0.08127357F, -0.029375266F, 0.044129096F, -0.103684865F, 0.12071667F, 0.06626867F, 0.11852283F, -0.20534243F, 0.009317261F, 0.012575845F, 0.014158904F, 0.10667529F, 0.072757974F, -0.06134383F, 0.18652363F, 0.17064045F, -0.1533896F, -0.21576606F, -0.043105148F, 0.008560792F, 0.014893225F, 0.0372991F, -0.022554554F, -0.31200436F, 0.04030041F, -0.023234626F, 0.061191693F, 0.012958429F, -0.097169764F, 0.08514266F, 0.058652762F, 0.18955895F, 0.15465988F, 0.21471988F, 0.119933695F, 0.06530461F, -0.18544897F, 0.041269004F, -0.013659753F, -0.107672386F, -0.019611405F, -0.039485518F, 0.13248385F, -0.02314141F, 0.035540048F, 0.023255702F, 0.022928424F, -0.009195918F, -0.05272756F, 0.04206746F, -0.13730524F, 0.007665653F, -0.15080416F, -0.09056639F, 0.15992607F, 0.08742647F, -0.07107586F, 0.005317071F, -0.014835456F, 0.12916766F, 0.041077048F, 0.053009965F, -0.15286262F, -0.23802836F, 0.037807405F, -0.17093001F, 0.13901521F, 0.029574191F, -0.1465521F, -0.15145953F, 0.07908913F, 0.112783976F, -0.13095157F, -0.027643763F, -0.110056475F, 0.12787984F, 0.07865367F, -0.03135672F, -0.04518889F, 0.058205657F, 0.06835233F, -0.021638181F, -0.0029581583F, 0.027689753F, -0.07978844F, -0.070389345F, 0.04568201F, -0.0022058776F, 0.005143389F, -0.0083381375F, -0.15397556F, -0.13884163F, 0.075197875F, 0.050134115F, -0.021110028F, -0.019959003F, 0.03301531F, 0.10350819F, 0.18760835F, 0.16677108F, -0.08015647F, -0.06054404F, -0.1350196F, 0.052632008F, -0.004656317F, 0.002624928F, -0.0028090533F, -0.1612333F, -0.16472411F, 0.15533818F, 0.028690921F, 0.035436466F, -0.094718106F, -0.1493788F, 0.07603788F, -0.15951832F, 0.11701415F, 0.05909587F, 0.073569156F, -0.21060002F, 0.19294667F, 0.033147927F, -0.060030986F, -0.09084814F, -0.021027949F, 0.036418654F, -0.13793612F, 0.016429879F, 0.084782824F, -0.1959892F, 0.0127711445F, -0.28161177F, 0.22615688F, 0.13626541F, 0.3947008F, 0.08781701F, -0.07823042F, -0.15568581F, -0.13302818F, 0.08109341F, 0.061564118F, -0.22796313F, -0.08467644F, -0.0016837548F, 0.16272251F, 0.047151174F, -0.22523871F, 0.16097507F, 0.117519595F, 0.045380104F, 0.12351579F, -0.035371315F, -0.05629994F, 0.09714592F, 0.1873346F, -0.054254197F, -0.01221443F, 0.21688147F, 0.13961771F, 0.010106203F, 0.23698479F, -0.0061812727F, 0.06700046F, 0.043522097F, -0.030401792F, -0.20019077F, -0.07882656F, 0.03402114F, -0.22456406F, 0.13656F, 0.032969333F, 0.006373126F, -0.024763435F, 0.08221154F, 0.01794016F, -0.010121137F, 0.21622005F, -0.24357972F, -0.13618931F, -0.04201708F, 0.011548476F, 0.02231228F, -0.084603935F, -0.150574F, -0.1602698F, -0.16109288F, 0.069792636F, 0.04043166F, 0.08646758F, 0.051459845F, 0.0943453F, -0.047372155F, 0.058002222F, -0.17991753F, 0.030960038F, 0.010531538F, -0.028880006F, 0.019063331F, -0.1793611F, -0.03123004F, -0.22308059F, 0.09600342F, 0.2352694F, 0.26825538F, 0.033067603F, -0.11423306F, 0.033532172F, -0.031771198F, 0.059603535F, -0.04900156F, -0.20262955F, -0.055127323F, -0.24553905F, -0.11371395F, -0.020101968F, 0.044724174F, -0.046943482F, -0.085465424F, -0.053451516F, 0.108731374F, -0.10806876F, 0.22041407F, 0.049994383F, 0.043377418F, -0.064474516F, 0.036256514F, -0.043419164F, 0.027528513F, -0.26837465F, -0.021812875F, -0.08583886F, -0.032236185F, 0.13765942F, -0.36035404F, 0.17490448F, -5.0900504E-4F, -0.11564869F, -0.04609642F, 0.046601F, 0.19815049F, 0.1871195F, -0.06700298F, -0.0369496F, -0.23263049F, -0.034273684F, -0.22847946F, 0.0069681136F, 0.2827949F, -0.12292365F, -0.045410734F, -0.052357975F, 0.14964855F, -0.03746645F, 0.06856269F, 0.011335141F, -0.035597898F, -0.018662097F, 0.010457994F, -0.052466065F, 0.17836444F, -0.061927512F, 0.016757796F, -0.09784714F, -0.20781472F, -0.16169776F, -0.0321516F, -0.01064722F, -0.20000298F, -0.12324281F, -0.16582792F, 0.02776422F, 0.04085741F, 0.0025488846F, -0.0645497F, 0.23542538F, 0.038417663F, 0.13744813F, 0.017619688F, 0.05184465F, -0.118832916F, -0.20206359F, 0.22291695F, -0.04147595F, -0.0683357F, -0.112257585F, -0.21374966F, -0.069496974F, 0.074484006F, 0.0742181F, 0.08458257F, -0.15228383F, -0.009528073F, -0.053858295F, -0.13119753F, 0.16518547F, -0.072299205F, -0.079338655F, 0.009673739F, 0.006453269F, -0.10312794F, -0.14405437F, 0.20200074F, 0.1799098F, -0.013211421F, 0.1133564F, 0.041202687F, -0.35305735F, 0.06780763F, -0.1926022F, -0.15750402F, -0.19650668F, 0.021562494F, 0.15924525F, 0.12012288F, 0.13432722F, -0.24379024F, -0.013194529F, 0.046228644F, 0.11258539F, -0.008009248F, -0.16235632F, 0.12048648F, -0.11869924F, 0.1349909F, 0.12965193F, -0.019534018F, -0.17073661F, -0.102326155F, -0.07124266F, 0.12916654F, 0.17530674F, 0.039976742F, 0.011578255F, -0.114317946F, -0.067097194F, -0.03826904F, 0.2268734F, -0.0874202F, 0.10001234F, -0.032034F, -0.030885395F, 0.11309938F, -0.17744654F, 0.0152436765F, -0.0015530012F, 0.039842024F, 0.16449176F, -0.13460186F, -0.052846342F, 0.24715999F, -0.049926274F, -0.06666978F, -0.018070435F, -0.14028528F, 0.075585425F, -0.0011719763F)

        // Verify results
        assertArrayEquals(expectedEmbedding, resultFloat, 0.1f)
    }

    @Test
    fun compare_embeddings_between_different_images() {
        val bitmap1: Bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.royalty_free_good_face)
        val bitmap2: Bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.royalty_free_bad_face)

        val embedding1 = simFace.embeddingProcessor.getEmbedding(bitmap1)
        val embedding2 = simFace.embeddingProcessor.getEmbedding(bitmap2)

        assertTrue(!embedding1.contentEquals(embedding2)) // Embeddings should be different
    }

    @Test
    fun consistency_test_with_same_image() {
        val bitmap: Bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.royalty_free_good_face)

        val embedding1 = simFace.embeddingProcessor.getEmbedding(bitmap)
        val embedding2 = simFace.embeddingProcessor.getEmbedding(bitmap)

        assertArrayEquals(embedding1, embedding2) // Embeddings should be identical
    }

}
